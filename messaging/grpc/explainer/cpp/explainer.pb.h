// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: explainer.proto

#ifndef PROTOBUF_explainer_2eproto__INCLUDED
#define PROTOBUF_explainer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace explainer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_explainer_2eproto();
void protobuf_AssignDesc_explainer_2eproto();
void protobuf_ShutdownFile_explainer_2eproto();

class ExplainerReply;
class ExplainerRequest;

// ===================================================================

class ExplainerRequest : public ::google::protobuf::Message {
 public:
  ExplainerRequest();
  virtual ~ExplainerRequest();

  ExplainerRequest(const ExplainerRequest& from);

  inline ExplainerRequest& operator=(const ExplainerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplainerRequest& default_instance();

  void Swap(ExplainerRequest* other);

  // implements Message ----------------------------------------------

  inline ExplainerRequest* New() const { return New(NULL); }

  ExplainerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExplainerRequest& from);
  void MergeFrom(const ExplainerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExplainerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string problem = 1;
  void clear_problem();
  static const int kProblemFieldNumber = 1;
  const ::std::string& problem() const;
  void set_problem(const ::std::string& value);
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  ::std::string* mutable_problem();
  ::std::string* release_problem();
  void set_allocated_problem(::std::string* problem);

  // @@protoc_insertion_point(class_scope:explainer.ExplainerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr problem_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_explainer_2eproto();
  friend void protobuf_AssignDesc_explainer_2eproto();
  friend void protobuf_ShutdownFile_explainer_2eproto();

  void InitAsDefaultInstance();
  static ExplainerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExplainerReply : public ::google::protobuf::Message {
 public:
  ExplainerReply();
  virtual ~ExplainerReply();

  ExplainerReply(const ExplainerReply& from);

  inline ExplainerReply& operator=(const ExplainerReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplainerReply& default_instance();

  void Swap(ExplainerReply* other);

  // implements Message ----------------------------------------------

  inline ExplainerReply* New() const { return New(NULL); }

  ExplainerReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExplainerReply& from);
  void MergeFrom(const ExplainerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExplainerReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string explanation = 1;
  void clear_explanation();
  static const int kExplanationFieldNumber = 1;
  const ::std::string& explanation() const;
  void set_explanation(const ::std::string& value);
  void set_explanation(const char* value);
  void set_explanation(const char* value, size_t size);
  ::std::string* mutable_explanation();
  ::std::string* release_explanation();
  void set_allocated_explanation(::std::string* explanation);

  // @@protoc_insertion_point(class_scope:explainer.ExplainerReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr explanation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_explainer_2eproto();
  friend void protobuf_AssignDesc_explainer_2eproto();
  friend void protobuf_ShutdownFile_explainer_2eproto();

  void InitAsDefaultInstance();
  static ExplainerReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplainerRequest

// optional string problem = 1;
inline void ExplainerRequest::clear_problem() {
  problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExplainerRequest::problem() const {
  // @@protoc_insertion_point(field_get:explainer.ExplainerRequest.problem)
  return problem_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainerRequest::set_problem(const ::std::string& value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:explainer.ExplainerRequest.problem)
}
inline void ExplainerRequest::set_problem(const char* value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:explainer.ExplainerRequest.problem)
}
inline void ExplainerRequest::set_problem(const char* value, size_t size) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:explainer.ExplainerRequest.problem)
}
inline ::std::string* ExplainerRequest::mutable_problem() {
  
  // @@protoc_insertion_point(field_mutable:explainer.ExplainerRequest.problem)
  return problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainerRequest::release_problem() {
  
  return problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainerRequest::set_allocated_problem(::std::string* problem) {
  if (problem != NULL) {
    
  } else {
    
  }
  problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), problem);
  // @@protoc_insertion_point(field_set_allocated:explainer.ExplainerRequest.problem)
}

// -------------------------------------------------------------------

// ExplainerReply

// optional string explanation = 1;
inline void ExplainerReply::clear_explanation() {
  explanation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExplainerReply::explanation() const {
  // @@protoc_insertion_point(field_get:explainer.ExplainerReply.explanation)
  return explanation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainerReply::set_explanation(const ::std::string& value) {
  
  explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:explainer.ExplainerReply.explanation)
}
inline void ExplainerReply::set_explanation(const char* value) {
  
  explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:explainer.ExplainerReply.explanation)
}
inline void ExplainerReply::set_explanation(const char* value, size_t size) {
  
  explanation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:explainer.ExplainerReply.explanation)
}
inline ::std::string* ExplainerReply::mutable_explanation() {
  
  // @@protoc_insertion_point(field_mutable:explainer.ExplainerReply.explanation)
  return explanation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainerReply::release_explanation() {
  
  return explanation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainerReply::set_allocated_explanation(::std::string* explanation) {
  if (explanation != NULL) {
    
  } else {
    
  }
  explanation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explanation);
  // @@protoc_insertion_point(field_set_allocated:explainer.ExplainerReply.explanation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace explainer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_explainer_2eproto__INCLUDED
