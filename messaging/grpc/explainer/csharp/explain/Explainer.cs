// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: explainer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Explainer {

  /// <summary>Holder for reflection information generated from explainer.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ExplainerReflection {

    #region Descriptor
    /// <summary>File descriptor for explainer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExplainerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9leHBsYWluZXIucHJvdG8SCWV4cGxhaW5lciIjChBFeHBsYWluZXJSZXF1",
            "ZXN0Eg8KB3Byb2JsZW0YASABKAkiJQoORXhwbGFpbmVyUmVwbHkSEwoLZXhw",
            "bGFuYXRpb24YASABKAkyTgoFU2hpRnUSRQoJVGVsbE1lV2h5EhsuZXhwbGFp",
            "bmVyLkV4cGxhaW5lclJlcXVlc3QaGS5leHBsYWluZXIuRXhwbGFpbmVyUmVw",
            "bHkiAEIzChljb20udGFyZGF0ZS5sY2suZXhwbGFpbmVyQg5FeHBsYWluZXJQ",
            "cm90b1ABogIDRVhQYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Explainer.ExplainerRequest), global::Explainer.ExplainerRequest.Parser, new[]{ "Problem" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Explainer.ExplainerReply), global::Explainer.ExplainerReply.Parser, new[]{ "Explanation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExplainerRequest : pb::IMessage<ExplainerRequest> {
    private static readonly pb::MessageParser<ExplainerRequest> _parser = new pb::MessageParser<ExplainerRequest>(() => new ExplainerRequest());
    public static pb::MessageParser<ExplainerRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Explainer.ExplainerReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExplainerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExplainerRequest(ExplainerRequest other) : this() {
      problem_ = other.problem_;
    }

    public ExplainerRequest Clone() {
      return new ExplainerRequest(this);
    }

    /// <summary>Field number for the "problem" field.</summary>
    public const int ProblemFieldNumber = 1;
    private string problem_ = "";
    public string Problem {
      get { return problem_; }
      set {
        problem_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExplainerRequest);
    }

    public bool Equals(ExplainerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Problem != other.Problem) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Problem.Length != 0) hash ^= Problem.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Problem.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Problem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Problem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Problem);
      }
      return size;
    }

    public void MergeFrom(ExplainerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Problem.Length != 0) {
        Problem = other.Problem;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Problem = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExplainerReply : pb::IMessage<ExplainerReply> {
    private static readonly pb::MessageParser<ExplainerReply> _parser = new pb::MessageParser<ExplainerReply>(() => new ExplainerReply());
    public static pb::MessageParser<ExplainerReply> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Explainer.ExplainerReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExplainerReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExplainerReply(ExplainerReply other) : this() {
      explanation_ = other.explanation_;
    }

    public ExplainerReply Clone() {
      return new ExplainerReply(this);
    }

    /// <summary>Field number for the "explanation" field.</summary>
    public const int ExplanationFieldNumber = 1;
    private string explanation_ = "";
    public string Explanation {
      get { return explanation_; }
      set {
        explanation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExplainerReply);
    }

    public bool Equals(ExplainerReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Explanation != other.Explanation) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Explanation.Length != 0) hash ^= Explanation.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Explanation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Explanation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Explanation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Explanation);
      }
      return size;
    }

    public void MergeFrom(ExplainerReply other) {
      if (other == null) {
        return;
      }
      if (other.Explanation.Length != 0) {
        Explanation = other.Explanation;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Explanation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
